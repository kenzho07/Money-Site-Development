<?php

/**
 * @file
 * Module file for ms_data_migration.
 */

/**
 * Implements hook_form_alter().
 *
 * Adds custom cron url to existing form
 */
function ms_data_migration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id === 'system_cron_settings') {
    $cronUrl = $form['cron_url']['#markup'];
    $url = _ms_data_migration_build_url();
    $element = t('To run data migration cron, go to <a href=":cron" class="system-cron-settings__link">@cron</a>', [':cron' => $url, '@cron' => $url]);
    $dataMigrationUrl = '<p>' . $element . '</p>';
    $form['cron_url']['#markup'] = $cronUrl . $dataMigrationUrl;
  }
}

/**
 * Builds data migration cron url
 * @return string
 */
function _ms_data_migration_build_url() {
  $key = \Drupal::state()->get('system.cron_key');
  $host = \Drupal::request()->getSchemeAndHttpHost();
  $path = \Drupal::service('path.current')->getPath();
  return $host . $path . '/ms_data_migration/' . $key;
}

/**
 * Implements hook_node_postupdate().
 */
function ms_data_migration_node_postupdate(Drupal\Core\Entity\EntityInterface $entity) {

  if($entity->getType() == 'site_posts') {
    $state = $entity->get('moderation_state')->value;
    $queue_factory = \Drupal::service('queue');
    if(($entity->isPublished() && $state == 'published') || ($state == 'archived')) {
      $queue = $queue_factory->get('cron_content_wp_push');
      $queue->createItem($entity->id());
    }

    \Drupal::logger('ms_data_migration')->debug(
      'Node ID update queue: <pre>@node</pre> <pre>@state</pre>',
      array(
        '@node' => print_r($entity->id(), TRUE),
        '@state' => print_r($state, TRUE),
      )
    );
  }
}
